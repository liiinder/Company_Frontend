@using System.Net.Http.Json
@using Company_Frontend.Components.Models;
@inject HttpClient httpClient
@inject IDialogService DialogService
@page "/customers"

<PageTitle>Customers</PageTitle>

<MudDataGrid T="Customer" Items="@customers" SortMode="@SortMode.Multiple" Filterable="true" Groupable="false"
             ReadOnly="false" EditMode="DataGridEditMode.Form" ColumnResizeMode="ResizeMode.Container"
             CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual">
    <Columns>
        <PropertyColumn Property="x => x.Email" Title="Email" />
        <PropertyColumn Property="x => x.FirstName" Title="Förnamn" />
        <PropertyColumn Property="x => x.LastName" Title="Efternamn" />
        <PropertyColumn Property="x => x.PhoneNumber" Title="Telefonnr" />
        <PropertyColumn Property="x => x.Country" Title="Land" />
        <PropertyColumn Property="x => x.City" Title="Stad" />
        <PropertyColumn Property="x => x.Street" Title="Adress" />
        <PropertyColumn Property="x => x.PostalCode" Title="Postnr" />

        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@((e) => DeleteCustomerAsync(context.Item))" />
                    <MudIconButton Size="@Size.Small" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudGrid Class="my-4"> 
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4"> 
            <MudStack Spacing="2"> 
                <MudButton OnClick="OnExpandCustomerClick">@(_expandedCustomerForm ? "Minimera" : "Lägg till ny kund.")</MudButton> 
                <MudCollapse Expanded="_expandedCustomerForm"> 
                    <MudText Typo="Typo.h6">Lägg till ny kund</MudText> 
                    <MudForm Model="@model" @ref="@form"> 
                        <MudTextField Label="Email" Required="true" RequiredError="Email måste fyllas i."  
                                      Variant="Variant.Outlined" @bind-Value="model.Email" For="@(() => model.Email)" /> 
                        <MudTextField Label="Förnamn" Required="true" RequiredError="Förnamn måste fyllas i."  
                                      Variant="Variant.Outlined" @bind-Value="model.FirstName" For="@(() => model.FirstName)" />
                        <MudTextField Label="Efternamn" Required="true" RequiredError="Efternamn måste fyllas i."
                                      Variant="Variant.Outlined" @bind-Value="model.LastName" For="@(() => model.LastName)" />
                        <MudTextField Label="Telefonnr" Variant="Variant.Outlined" @bind-Value="model.PhoneNumber" For="@(() => model.PhoneNumber)" />
                        <MudTextField Label="Land" Variant="Variant.Outlined" @bind-Value="model.Country" For="@(() => model.Country)" />
                        <MudTextField Label="Stad" Variant="Variant.Outlined" @bind-Value="model.City" For="@(() => model.City)" />
                        <MudTextField Label="Adress" Variant="Variant.Outlined" @bind-Value="model.Street" For="@(() => model.Street)" />
                        <MudTextField Label="Postnr" Variant="Variant.Outlined" @bind-Value="model.PostalCode" For="@(() => model.PostalCode)" />
                    </MudForm> 
                    <MudPaper Class="pa-4"> 
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" onclick="@AddCustomer" DropShadow="false">Lägg till kund</MudButton> 
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>{form.ResetAsync();})" DropShadow="false" Class="mx-2">Återställ</MudButton> 
                    </MudPaper> 
                </MudCollapse> 
            </MudStack> 
        </MudPaper> 
    </MudItem>
</MudGrid>

@code {

    //TODO: Fixa så det inte står objektet på selecten vid edit när man öppnar den

    public IEnumerable<Customer> customers = new List<Customer>();
    public Customer model = new();
    MudForm form;

    public List<string> _events = new();

    bool _expandedCustomerForm = false;

    private void OnExpandCustomerClick()
    {
        _expandedCustomerForm = !_expandedCustomerForm;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCustomersAsync();
    }

    private async Task GetCustomersAsync()
    {
        try
        {
            customers = await httpClient.GetFromJsonAsync<List<Customer>>("https://localhost:7227/api/customer");
        }
        catch { } // logga om det blir något fel när man hämtar produkten?
        Console.WriteLine("hey");
    }

    private async Task AddCustomer()
    {
        var response = new HttpResponseMessage();

        try
        {
            response = await httpClient.PostAsJsonAsync("https://localhost:7227/api/customer", model);
        }
        catch { } // logga fel om det inte går att posta

        if (response.IsSuccessStatusCode)
        {
            await form.ResetAsync();
            await GetCustomersAsync();
        }
        // else { logga något om det är fel statuskod? }
    }

    async Task DeleteCustomerAsync(Customer customer)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.Name, customer.Email },
            { x => x.Type, "kund:" }
        };

        try 
        {
            var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete Server", parameters );
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await httpClient.DeleteAsync($"https:localhost:7227/api/customer/{customer.Id}");
                await GetCustomersAsync();
            }
        }
        catch (ObjectDisposedException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    } 

    // events / https://mudblazor.com/components/datagrid#editing
    async void CommittedItemChanges(Customer item)
    {
        // Call the API to save the change update
        await httpClient.PutAsJsonAsync($"https://localhost:7227/api/product/{item.Id}", item);
        await GetCustomersAsync();
    }
}