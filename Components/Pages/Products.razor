@using System.Net.Http.Json
@using Company_Frontend.Components.Models
@inject HttpClient httpClient
@inject IDialogService DialogService
@page "/products"

<PageTitle>Products</PageTitle>

<MudDataGrid T="Product" Items="@products" SortMode="@SortMode.Multiple" Filterable="true" Groupable="false" 
ReadOnly="false" EditMode="DataGridEditMode.Form"
CommittedItemChanges="@CommittedItemChanges"
Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Produktnr"/>
        <PropertyColumn Property="x => x.Name" Title="Namn"/>
        <PropertyColumn Property="x => x.Description" Title="Beskrivning" />
        <PropertyColumn Property="x => x.Category.Name" Title="Kategori">
            <EditTemplate>
                <MudSelect T="Category" @bind-Value="context.Item.Category" Label="Välj kategori" Variant="Variant.Outlined"
                Placeholder="Klicka här" AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary"
                For="@(() => model.Category)">
                    @foreach (var cat in categories)
                    {
                        <MudSelectItem T="Category" Value="@cat">@cat.Name</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Price" Format="C" Title="Pris" />
        <TemplateColumn Title="Finns i lager">
            <CellTemplate>
                @(context.Item.Status ? "Ja" : "Nej")
            </CellTemplate>
            <EditTemplate>
                <MudCheckBox @bind-Value="context.Item.Status" Label="Finns i sortimentet" />
            </EditTemplate>
        </TemplateColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@((e) => DeleteProductAsync(context.Item))" />
                    <MudIconButton Size="@Size.Small" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudGrid Class="my-4">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudStack Spacing="2">
                <MudButton OnClick="OnExpandProductClick">@(_expandedProductForm ? "Minimera" : "Lägg till ny produkt.")</MudButton>
                <MudCollapse Expanded="_expandedProductForm">
                    <MudText Typo="Typo.h6">Lägg till ny produkt</MudText>
                    <MudForm Model="@model" @ref="@form">
                        <MudTextField
                        Label="Namn" Required="true" RequiredError="Namn måste fyllas i." 
                        Variant="Variant.Outlined" @bind-Value="model.Name" For="@(() => model.Name)" />
                        <MudTextField
                        Label="Beskrivning" Required="true" RequiredError="Beskrivning måste fyllas i." 
                        Variant="Variant.Outlined" @bind-Value="model.Description" For="@(() => model.Description)" />
                        <MudSelect T="Category" @bind-Value="model.Category" Label="Välj kategori" Variant="Variant.Outlined"
                        Placeholder="Klicka här" AdornmentIcon="@Icons.Material.Filled.Fastfood" AdornmentColor="Color.Primary"
                        For="@(() => model.Category)">
                            @foreach (var cat in categories)
                            {
                                <MudSelectItem T="Category" Value="@cat">@cat.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudNumericField
                        T="decimal" Label="Pris" Required="true" RequiredError="Pris måste fyllas i"
                        Variant="Variant.Outlined" Min="0" @bind-Value="model.Price" For="@(() => model.Price)" />
                        <MudCheckBox
                        T="bool" Label="Finns i sortimentet" @bind-Value="model.Status"
                        For="@(() => model.Status)" Color="Color.Primary" UncheckedColor="Color.Default" />
                    </MudForm>
                    <MudPaper Class="pa-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" onclick="@AddProduct" DropShadow="false">Lägg till produkt</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>{form.ResetAsync();})" DropShadow="false" Class="mx-2">Återställ</MudButton>
                    </MudPaper>
                </MudCollapse>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

<MudDataGrid T="Category" Items="@categories" SortMode="@SortMode.Multiple" Filterable="true" Groupable="false"
             ReadOnly="false" EditMode="DataGridEditMode.Form"
             CommittedItemChanges="@EditedCategory"
             Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" />
        <PropertyColumn Property="x => x.Name" Title="Namn" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@((e) => DeleteCategoryAsync(context.Item))" />
                    <MudIconButton Size="@Size.Small" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudGrid Class="my-4">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudStack Spacing="2">
                <MudButton OnClick="OnExpandCategoryClick">@(_expandedCategoryForm ? "Minimera" : "Lägg till ny kategori.")</MudButton>
                <MudCollapse Expanded="_expandedCategoryForm">
                    <MudText Typo="Typo.h6">Lägg till ny kategori</MudText>
                    <MudForm Model="@categoryModel" @ref="@categoryForm">
                        <MudTextField Label="Namn" Required="true" RequiredError="Namn måste fyllas i."
                                      Variant="Variant.Outlined" @bind-Value="categoryModel.Name" For="@(() => categoryModel.Name)" />
                    </MudForm>
                    <MudPaper Class="pa-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" onclick="@AddCategory" DropShadow="false">Lägg till kategori</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>{categoryForm.ResetAsync();})" DropShadow="false" Class="mx-2">Återställ</MudButton>
                    </MudPaper>
                </MudCollapse>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    //TODO: Fixa så det inte står objektet på selecten vid edit när man öppnar den

    public IEnumerable<Product> products = new List<Product>();
    public Product model = new();
    MudForm form;

    public IEnumerable<Category> categories = new List<Category>();
    public Category categoryModel = new();
    MudForm categoryForm;

    public List<string> _events = new();

    bool _expandedProductForm = false;
    bool _expandedCategoryForm = false;

    private void OnExpandProductClick()
    {
        _expandedProductForm = !_expandedProductForm;
    }
    
    private void OnExpandCategoryClick()
    {
        _expandedCategoryForm = !_expandedCategoryForm;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetProductsAsync();
        await GetCategoriesAsync();
    }

    private async Task GetProductsAsync()
    {
        try
        {
            products = await httpClient.GetFromJsonAsync<List<Product>>("https://localhost:7227/api/product");
        }
        catch { } // logga om det blir något fel när man hämtar produkten?
    }

    private async Task GetCategoriesAsync()
    {
        try
        {
            categories = await httpClient.GetFromJsonAsync<List<Category>>("https://localhost:7227/api/category");
        }
        catch { }
    }

    private async Task AddProduct()
    {
        var response = new HttpResponseMessage();

        try
        {
            response = await httpClient.PostAsJsonAsync("https://localhost:7227/api/product", model);
        }
        catch { } // logga fel om det inte går att posta

        if (response.IsSuccessStatusCode)
        {
            await form.ResetAsync();
            await GetProductsAsync();
        }
        // else { logga något om det är fel statuskod? }
    }

    private async Task AddCategory()
    {
        var response = new HttpResponseMessage();

        try
        {
            response = await httpClient.PostAsJsonAsync("https://localhost:7227/api/category", categoryModel);
        }
        catch { } // logga fel om det inte går att posta

        if (response.IsSuccessStatusCode)
        {
            await categoryForm.ResetAsync();
            await GetCategoriesAsync();
        }
        // else { logga något om det är fel statuskod? }
    }


    async Task DeleteProductAsync(Product product)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.Name, product.Name },
            { x => x.Type, "produkt:" }
        };

        try 
        {
            var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete Server", parameters );
            var result = await dialog.Result;
         
            if (!result.Canceled)
            {
                await httpClient.DeleteAsync($"https://localhost:7227/api/product/{product.Id}");
                await GetProductsAsync();
            }
        }
        catch (ObjectDisposedException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    async Task DeleteCategoryAsync(Category category)
    {
        var parameters = new DialogParameters<DeleteDialog>
        {
            { x => x.Name, category.Name },
            { x => x.Type, "kategori:"}
        };

        try
        {
            var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete Server", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await httpClient.DeleteAsync($"https://localhost:7227/api/category/{category.Id}");
                await GetProductsAsync();
            }
        }
        catch (ObjectDisposedException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

    }

    // events / https://mudblazor.com/components/datagrid#editing
    async void CommittedItemChanges(Product item)
    {
        // Call the API to save the change update
        await httpClient.PutAsJsonAsync($"https://localhost:7227/api/product/{item.Id}", item);
        await GetProductsAsync();
    }

    async void EditedCategory(Category item)
    {
        // Call the API to save the change update
        await httpClient.PutAsJsonAsync($"https://localhost:7227/api/category/{item.Id}", item);
        await GetCategoriesAsync();
    }
}